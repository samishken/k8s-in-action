# CI for Product Catalog Service

name: product-catalog-ci

on: 
    workflow_dispatch:
    # pull_request:
    #     branches:
    #     - main
      inputs:
        environment:
          description: 'Terraform environment (dev, staging, prod)'
          required: true
          default: 'dev'

# Required for OIDC authentication
permissions:
  id-token: write
  contents: read

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
        - name: checkout code
          uses: actions/checkout@v4

        - name: Setup Go 1.22
          uses: actions/setup-go@v2
          with:
            go-version: 1.22
        
        - name: Build
          run: |
            cd app/src/product-catalog
            go mod download
            go build -o product-catalog-service main.go

        - name: unit tests
          run: |
            cd app/src/product-catalog
            go test ./...
    
    code-quality:
        runs-on: ubuntu-latest
        needs: [build] 

        steps:
        - name: checkout code
          uses: actions/checkout@v4
        
        - name: Setup Go 1.22
          uses: actions/setup-go@v2
          with:
           go-version: 1.22
        
        - name: Run golangci-lint
          uses: golangci/golangci-lint-action@v6
          continue-on-error: true
          with:
            version: v1.55.2
            args: run ./app/src/product-catalog/...

    docker-deploy:
        runs-on: ubuntu-latest
        needs: [build, code-quality] 


        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            # Authenticate with AWS using OIDC
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
                aws-region: ${{ vars.AWS_REGION }}
            
            # Login to Amazon ECR
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            
            - name: Build, tag, and push docker image to Amazon ECR
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: ${{ github.sha }}
                ECR_REPOSITORY_DEV: ${{ secrets.ECR_REPOSITORY_DEV }}
                ECR_REPOSITORY_PROD: ${{ secrets.ECR_REPOSITORY_PROD }}
                ECR_REPOSITORY_STAGING: ${{ secrets.ECR_REPOSITORY_STAGING }}
              run: |
                if [ "${{ github.event.inputs.environment }}" = "dev" ]; then
                  REPOSITORY="$ECR_REPOSITORY_DEV"
                elif [ "${{ github.event.inputs.environment }}" = "prod" ]; then
                  REPOSITORY="$ECR_REPOSITORY_PROD"
                else
                  REPOSITORY="$ECR_REPOSITORY_STAGING"
                fi
                docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
                docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG


    
    # updatek8s:
    #     runs-on: ubuntu-latest

    #     needs: docker

    #     steps:
    #     - name: checkout code
    #       uses: actions/checkout@v4
    #       with:
    #         token: ${{ secrets.GITHUB_TOKEN }}

    #     - name: Update tag in kubernetes deployment manifest
    #       run: | 
    #            sed -i "s|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{github.run_id}}|" kubernetes/productcatalog/deploy.yaml
        
    #     - name: Commit and push changes
    #       run: |
    #         git config --global user.email "samishken@gmail.com"
    #         git config --global user.name "samishken"
    #         git add kubernetes/productcatalog/deploy.yaml
    #         git commit -m "[CI]: Update product catalog image tag"
    #         git push origin HEAD:main -f


